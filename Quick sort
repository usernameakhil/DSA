Last element as pivot

QuickSort(array, low, high)
1. If low < high:
   a. pivotIndex = Partition(array, low, high)
   b. QuickSort(array, low, pivotIndex - 1)
   c. QuickSort(array, pivotIndex + 1, high)

Partition(array, low, high)
1. Set pivot = array[high]
2. Initialize i = low - 1
3. For j from low to high - 1:
   a. If array[j] <= pivot:
      i++
      Swap(array[i], array[j])
4. Swap(array[i + 1], array[high])
5. Return i + 1




void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pivotIndex = partition(arr, low, high);
        quickSort(arr, low, pivotIndex - 1);
        quickSort(arr, pivotIndex + 1, high);
    }
}

int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}



With first element as pivot


QuickSort(array, low, high)
1. If low < high:
   a. pivotIndex = Partition(array, low, high)
   b. QuickSort(array, low, pivotIndex - 1)
   c. QuickSort(array, pivotIndex + 1, high)

Partition(array, low, high)
1. Set pivot = array[low]
2. Initialize i = high + 1
3. For j from high down to low + 1:
   a. If array[j] >= pivot:
      i--
      Swap(array[i], array[j])
4. Swap(array[i - 1], array[low])
5. Return i - 1



void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pivotIndex = partition(arr, low, high);
        quickSort(arr, low, pivotIndex - 1);
        quickSort(arr, pivotIndex + 1, high);
    }
}

int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[low];
    int i = high + 1;
    for (int j = high; j > low; j--) {
        if (arr[j] >= pivot) {
            i--;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i - 1], arr[low]);
    return i - 1;
}
