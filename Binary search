Search Insert Position

SearchInsertPosition(array A, integer target)
1. Set left = 0, right = length of A - 1
2. while left <= right do
3.     mid = left + (right - left) / 2
4.     if A[mid] == target then
5.         return mid
6.     else if A[mid] < target then
7.         left = mid + 1
8.     else
9.         right = mid - 1
10. return left // Position to insert target



Sqrt(x)

Sqrt(x)
1. if x < 0 then
2.     return -1 // Invalid input
3. Set left = 0, right = x
4. while left <= right do
5.     mid = left + (right - left) / 2
6.     if mid * mid == x then
7.         return mid
8.     else if mid * mid < x then
9.         left = mid + 1
10.     else
11.         right = mid - 1
12. return right // Integer square root



Intersection of Two Arrays


IntersectionOfTwoArrays(array A, array B)
1. Create a set to store elements of A
2. for each element in A do
3.     add element to the set
4. Create an empty list for the result
5. for each element in B do
6.     if element is in the set then
7.         add element to the result
8. return result



Intersection of Two Arrays II

IntersectionOfTwoArraysII(array A, array B)
1. Create a map to count occurrences of elements in A
2. for each element in A do
3.     increment count in the map
4. Create an empty list for the result
5. for each element in B do
6.     if element is in the map and count > 0 then
7.         add element to the result
8.         decrement count in the map
9. return result


Valid Perfect Square

IsPerfectSquare(integer num)
1. if num < 0 then
2.     return false
3. Set left = 0, right = num
4. while left <= right do
5.     mid = left + (right - left) / 2
6.     if mid * mid == num then
7.         return true
8.     else if mid * mid < num then
9.         left = mid + 1
10.     else
11.         right = mid - 1
12. return false


Binary Search

BinarySearch(array A, integer target)
1. Set left = 0, right = length of A - 1
2. while left <= right do
3.     mid = left + (right - left) / 2
4.     if A[mid] == target then
5.         return mid
6.     else if A[mid] < target then
7.         left = mid + 1
8.     else
9.         right = mid - 1
10. return -1 // Target not found



Find Smallest Letter Greater Than Target

FindSmallestLetter(array letters, char target)
1. Set left = 0, right = length of letters - 1
2. while left <= right do
3.     mid = left + (right - left) / 2
4.     if letters[mid] <= target then
5.         left = mid + 1
6.     else
7.         right = mid - 1
8. return letters[left % length of letters] // Wrap around if needed
