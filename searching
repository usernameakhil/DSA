Linear search 

LinearSearch(array A, integer target)
1. for i from 0 to length of A - 1 do
2.     if A[i] == target then
3.         return i // Target found at index i
4. return -1 // Target not found


#include <iostream>
#include <vector>
using namespace std;

int linearSearch(const vector<int>& A, int target) {
    for (int i = 0; i < A.size(); i++) {
        if (A[i] == target) {
            return i; // Target found at index i
        }
    }
    return -1; // Target not found
}

int main() {
    vector<int> arr = {2, 4, 6, 8, 10};
    int target = 6;
    int result = linearSearch(arr, target);
    
    if (result != -1) {
        cout << "Element found at index: " << result << endl; // Output: Element found at index: 2
    } else {
        cout << "Element not found." << endl;
    }
    
    return 0;
}



binary search(iterative version)

BinarySearchIterative(array A, integer target)
1. Set left = 0, right = length of A - 1
2. while left <= right do
3.     mid = left + (right - left) / 2
4.     if A[mid] == target then
5.         return mid // Target found at index mid
6.     else if A[mid] < target then
7.         left = mid + 1
8.     else
9.         right = mid - 1
10. return -1 // Target not found



#include <iostream>
#include <vector>
using namespace std;

int binarySearchIterative(const vector<int>& A, int target) {
    int left = 0, right = A.size() - 1;
    
    while (left <= right) {
        int mid = left + (right - left) / 2; // Avoid overflow
        if (A[mid] == target) {
            return mid; // Target found at index mid
        } else if (A[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return -1; // Target not found
}

int main() {
    vector<int> arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int target = 7;
    int result = binarySearchIterative(arr, target);
    
    if (result != -1) {
        cout << "Element found at index: " << result << endl; // Output: Element found at index: 6
    } else {
        cout << "Element not found." << endl;
    }
    
    return 0;
}



binary search(recursive version)


BinarySearchRecursive(array A, integer target, integer left, integer right)
1. if left > right then
2.     return -1 // Target not found
3. mid = left + (right - left) / 2
4. if A[mid] == target then
5.     return mid // Target found at index mid
6. else if A[mid] < target then
7.     return BinarySearchRecursive(A, target, mid + 1, right)
8. else
9.     return BinarySearchRecursive(A, target, left, mid - 1)



#include <iostream>
#include <vector>
using namespace std;

int binarySearchRecursive(const vector<int>& A, int target, int left, int right) {
    if (left > right) {
        return -1; // Target not found
    }
    
    int mid = left + (right - left) / 2;
    if (A[mid] == target) {
        return mid; // Target found at index mid
    } else if (A[mid] < target) {
        return binarySearchRecursive(A, target, mid + 1, right);
    } else {
        return binarySearchRecursive(A, target, left, mid - 1);
    }
}

int main() {
    vector<int> arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int target = 5;
    int result = binarySearchRecursive(arr, target, 0, arr.size() - 1);
    
    if (result != -1) {
        cout << "Element found at index: " << result << endl; // Output: Element found at index: 4
    } else {
        cout << "Element not found." << endl;
    }
    
    return 0;
}
